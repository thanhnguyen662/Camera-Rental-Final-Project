generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["selectRelationCount", "fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id              Int              @id @default(autoincrement())
  name            String?
  description     String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  slug            String           @unique
  firebaseId      String?
  brand           String?
  price           Int?
  qualityRate     Float?
  stock           Int?
  publicStatus    Boolean?         
  productPhotoURL String[]
  categoryId      Int?
  completed       Int?             @default(0)
  User            User?            @relation(fields: [firebaseId], references: [firebaseId])
  categories      Category?        @relation(fields: [categoryId], references: [id])
  carts           Cart[]
  productComments ProductComment[]
  pins            Pin[]
  orderItems      OrderItem[]
  postProducts    PostProduct[]

  @@map("Products")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String?
  description String?
  Product     Product[]
}

model User {
  firebaseId      String           @id
  username        String?
  age             Int?
  gender          String?
  address         String?
  favouriteGear   String?
  rate            Float?           @default(0)
  description     String?
  hasTag          String?
  photoURL        String?
  phoneNumber     String?
  carts           Cart[]
  products        Product[]
  productComments ProductComment[]
  orders          Order[]
  userStats       UserStat[]
  userComments    UserComment[]
  posts           Post[]
  postComments    PostComment[]
  membersBeta1    MemberBeta1[]
  messagesBeta1   MessageBeta1[]

  @@map("Users")
}

model UserStat {
  id         Int     @id @default(autoincrement())
  success    Float?  @default(0)
  come       Float?  @default(0)
  totalOrder Float?  @default(0)
  userId     String? @unique
  user       User?   @relation(fields: [userId], references: [firebaseId])
}

model UserComment {
  id             Int      @id @default(autoincrement())
  content        String?
  userId         String?
  rate           Float?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  authorId       String?
  authorUsername String?
  authorPhotoURL String?
  user           User?    @relation(fields: [userId], references: [firebaseId])
}

model Conversation {
  id        Int       @id @default(autoincrement())
  members   String[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[]

  @@map("Conversations")
}

model Message {
  id             Int          @id @default(autoincrement())
  text           String?
  conversationId Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  sender         String
  conversations  Conversation @relation(fields: [conversationId], references: [id])

  @@map("Messages")
}

model Cart {
  id         Int       @id @default(autoincrement())
  startDate  DateTime?
  endDate    DateTime?
  firebaseId String?
  productId  Int?
  User       User?     @relation(fields: [firebaseId], references: [firebaseId])
  Product    Product?  @relation(fields: [productId], references: [id])

  @@map("Carts")
}

model ProductComment {
  id        Int      @id @default(autoincrement())
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId Int?
  authorId  String?
  rate      Float?
  product   Product? @relation(fields: [productId], references: [id])
  user      User?    @relation(fields: [authorId], references: [firebaseId])

  @@map("ProductComments")
}

model Pin {
  id        Int      @id @default(autoincrement())
  lat       String?
  long      String?
  address   String?
  ward      String?
  district  String?
  city      String?
  productId Int?     @unique
  product   Product? @relation(fields: [productId], references: [id])

  @@map("Pins")
}

model Order {
  id               String       @id @default(uuid())
  address          String?
  totalPrice       Int?
  userId           String?
  orderStatusId    Int?
  note             String?
  createdAt        DateTime     @default(now())
  acceptAt         DateTime?
  paidAt           DateTime?
  cancelAt         DateTime?
  backAt           DateTime?
  updatedAt        DateTime     @updatedAt
  isShopComment    Boolean      @default(false)
  isUserComment    Boolean      @default(false)
  isProductComment Boolean      @default(false)
  orderItems       OrderItem[]
  User             User?        @relation(fields: [userId], references: [firebaseId])
  orderStatus      OrderStatus? @relation(fields: [orderStatusId], references: [id])

  @@map("Orders")
}

model OrderItem {
  id                 Int       @id @default(autoincrement())
  totalPricePerHour  String?
  during             String?
  price              Int?
  startDate          DateTime?
  endDate            DateTime?
  orderId            String
  productId          Int
  isOrderItemComment Boolean   @default(false)
  Order              Order?    @relation(fields: [orderId], references: [id])
  Product            Product?  @relation(fields: [productId], references: [id])

  @@map("OrderItems")
}

model OrderStatus {
  id     Int     @id @default(autoincrement())
  name   String?
  orders Order[]
}

model Post {
  id           Int           @id @default(autoincrement())
  caption      String?
  images       String[]
  like         String[]
  add          Int           @default(0)
  userId       String?
  user         User?         @relation(fields: [userId], references: [firebaseId])
  comments     PostComment[]
  postProducts PostProduct[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model PostComment {
  id        Int      @id @default(autoincrement())
  content   String?
  postId    Int?
  userId    String?
  post      Post?    @relation(fields: [postId], references: [id])
  user      User?    @relation(fields: [userId], references: [firebaseId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PostProduct {
  id        Int      @id @default(autoincrement())
  postId    Int?
  post      Post?    @relation(fields: [postId], references: [id])
  productId Int?
  product   Product? @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ConversationBeta1 {
  id        Int            @id @default(autoincrement())
  members   MemberBeta1[]
  messages  MessageBeta1[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model MemberBeta1 {
  id             Int                @id @default(autoincrement())
  conversationId Int?
  userId         String?
  conversation   ConversationBeta1? @relation(fields: [conversationId], references: [id])
  user           User?              @relation(fields: [userId], references: [firebaseId])
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
}

model MessageBeta1 {
  id             Int                @id @default(autoincrement())
  content        String?
  userId         String?
  conversationId Int?
  conversation   ConversationBeta1? @relation(fields: [conversationId], references: [id])
  user           User?              @relation(fields: [userId], references: [firebaseId])
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
}

enum Role {
  USER
  ADMIN
  EMPLOYEE
}
